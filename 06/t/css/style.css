/* Скидання стилів */
@import url("reset.css");

/* Основні стилі */
body {
}

/* ======================================================== */
/* --------------- CSS-властивості блоків ----------------- */
/* ======================================================== */

.block {
	background-color: #77608d;
}
.inline {
	background-color: #7a956b;
}
.inline-block {
	background-color: #794f45;
}

/* Відступи */
/* Відступи неочикувано працюють для рядкових об'єктів */
/* Відступи прийнято задавати для батьківського об'єкту */

/*
padding - Внутрішній відступ. 
Відступи ВСЕРЕДЕНІ об'єкту. 
Від кордонів об'єкту ДО ЙОГО КОНТЕНТУ
НЕ успадковується

Анатомія значення відступів:
- Цифрове значення + одиниця виміру (10px, 50%... і т.д.)
- Не може бути від'ємним
- При вказанні значення у відсотках
відсоток береться від ширини батьківського об'єкту,
навіть для вертикальних відступів 

padding: з_усіх_сторін;
padding: зверху_знизу зправа_зліва;
padding: зверху зправа_зліва знизу;
padding: зверху зправа знизу зліва;
(годинникова стрілка)

padding-top: значення;
padding-right: значення;
padding-bottom: значення;
padding-left: значення;

*/
.block {
	/* padding: 15px; */
	/* 
	padding-left: 30%;
	padding-top: 30%;
	 */
}
.inline {
	/* padding: 15px; */
}
.inline-block {
	/* padding: 15px; */
}

/* Приклад відступу для батьківського елементу */
/* Задаємо відступ батьківському елементу а не контенту */

/* Вірно */
.block {
	/* padding: 15px; */
}
/*НЕвірно */
.block p {
	/* padding: 15px; */
}

/*
margin - Зовнішній відступ.
Відступи ЗОВНІ об'єкту до інших об'єктів. 
НЕ успадковується

Особливості:
- Значення можуть бути від'ємними!
- Спрацьовує ефект "схлопування" (накладання, колапс, згортання)

margin: з_усіх_сторін;
margin: зверху_знизу зправа_зліва;
margin: зверху зправа_зліва знизу;
margin: зверху зправа знизу зліва;

margin-top: значення;
margin-right: значення;
margin-bottom: значення;
margin-left: значення;
*/

.block {
	/* margin: 15px; */
}
.inline {
	/* margin: 15px; */
}
.inline-block {
	/* margin: 15px; */
}

/* Приклад відступу для батьківського елементу */
/* Задаємо відступ батьківському елементу а не контенту */

/* Вірно */
.block {
	/* margin-bottom: 20px; */
}

/*НЕвірно */
.block p {
	/* margin-bottom: 20px; */
}

/* 
	Приклад поєднання відступів та застосування
	до батьківстких та дочірніх елементів 
*/
/* 
.block {
	padding: 20px;
	margin-bottom: 20px;
}
.block p {
	margin-bottom: 20px;
}
 */

/* 
	Проговорюємо вголос:
	1) який тип відступу треба
	2) для якого об'єкту треба задати відступ
*/

/*
Ефект "схлопування" (накладання, колапс, згортання) margin.
Виникає коли зовнішній відступ заданий сусіднім об'єктам.

Значання відступу буде дорівнювати 
найбільшому з 2х значеннь.
Відступ margin прийнято задавати з ліва направо
та зверху вниз
*/

.block {
	/* Цей переміг :) */
	/* margin-bottom: 80px; */
}
.block-2 {
	/* 
	margin-top: 50px;
	background-color: yellowgreen;
	 */
}

/* Від'ємні значення */
.block {
	/* margin-bottom: -100px; */
}
.block-2 {
	/* 
		Відбудеться "підняття" об'єкту вверх
		разом з усіма наступними елементами в коді
	 */
	/* margin-top: -100px; */
	/* background-color: yellowgreen; */
}

/*
width - чітко задає ширину блочного (блочно-рядкового) 
об'єкту.
НЕ працює зі рядковими об'єктами
width: значення;
auto - (за замовченням) автоматичний розмір
НЕ успадковується
*/
/*
max-width 
Встановлює максимальну ширину 
блочних (блочно-рядкових) тегів 
Властивість не успадковується 
НЕ працює зі рядковими об'єктами
*/
/*
min-width 
Встановлює мінімальну ширину 
блочних (блочно-рядкових) тегів 
Властивість не успадковується 
НЕ працює зі рядковими об'єктами
*/

/* 
	Значення у %
	% береться від ширини батьківського об'єкту
*/

.block {
	/* width: 200px; */
	/* width: 50%; */
	/* max-width: 400px; */
	/* min-width: 400px; */
}
.inline {
	/* width: 100px; */
}
.inline-block {
	/* width: 100%; */
	max-width: 100%;
}

/*
height 
Встановлює чітку висоту блочних (блочно-рядкових) тегів 
Властивість не успадковується 
НЕ працює зі рядковими об'єктами

min-height 
Встановлює мінімальну висоту 
блочних (блочно-рядкових) тегів 
Властивість не успадковується 
НЕ працює зі рядковими об'єктами

max-height 
Встановлює максимальну 
висоту блочних (блочно-рядкових) тегів 
Властивість не успадковується 
НЕ працює зі рядковими об'єктами
*/
.block {
	/* height: 200px; */
}
.inline {
}
.inline-block {
}

/*
box-sizing
Застосовується для зміни алгоритму обчислення величин
content-box - (за замовченням) додає відступи
до розміру об'єкту
border-box - значення розмірів враховують відступи
*/

.block {
}
.inline {
}
.inline-block {
}

/*
overflow 
Керує відображенням контенту блочного елементу
Властивість не успадковується
visible - (за замовченням) Відображається усесь 
контент елемента, навіть за межами встановлених розмірів
hidden - Відображається тільки контент всередені елемента,
clip - Майже теж саме що й hidden.
все інше буде сховано
scroll - Завжди додаються смужки прокрутки
auto - Смужки прокрутки додаються лише за необхідністю

Тільки вертикаль
overflow-y: ; 
Тільки горизонталь
overflow-x: ;
*/

.block {
	/* 
	overflow: auto;
	max-height: 100px;
	 */
}

/*
vertical-align - Визначає вертикальне верівнювання 
блочно-рядкових або блочно-рядкових + рядкових об'єктів.
top
middle
bottom
*/

.block {
}
.inline {
}
.inline-block {
}

/*
display
Багатоцільова властивість яка задає 
глобальні параметри тега. 
Властивість не успадковується
block - (за замовченням для блочних об'ектів) 
Елемент відображається як блочний.
inline - (за замовченням для рядкових об'ектів)  
Елемент відображається як рядковий.
inline-block - (блочно-рядковий) Елемент відображається як 
рядковий але з можливістю 
використання усіх CSS-властивостей.
none - Елемент не виводиться в браузер. 
Інші елементи займають його місце.
Не приймає участь у обробці браузером.
*/

.block {
	/* display: block; (за замовченням) */
}
.inline {
	/* display: inline; (за замовченням) */
}
.inline-block {
	/* display: inline-block; (за замовченням) */
	/* 
	Нічого не змінює 
	display: inline;
	*/
}

.block {
	/* display: none; */
}

/* Центрування блоку */
/*
1) Об'єкт має бути блочним
2) Об'єкт має мати меньшу ширину за батьківський елемент
3) Додаємо margin: 0 auto;
*/
.block {
	/* max-width: 400px; */
	/* margin: 0 auto; */
	/* margin: 0 auto 30px; */
}

.example {
	padding: 15px;
	background-color: #7a956b;
}

.example p {
	margin-bottom: 15px;
}
.example a {
	color: yellow;
	display: inline-block;
	margin-bottom: 15px;
}

/* Тимчасовий приклад побудови конструкції */

.vertical-align {
	font-size: 0;
}
.vertical-align__item {
	width: 150px;
	padding: 15px;
	font-size: 14px;
	background-color: #794f45;
	display: inline-block;
	vertical-align: top;
	margin-right: 10px;
}
